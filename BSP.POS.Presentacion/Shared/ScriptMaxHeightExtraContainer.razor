@using System.Text.Json;
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
<div>
</div>

@code {
    [Parameter]
    public string Contenido { get; set; } = string.Empty;
    [Parameter]
    public string Contenedor { get; set; } = string.Empty;
    [Parameter]
    public string[] Elementos { get; set; } = new string[0];


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
            await Task.Delay(100);
            var elementosJson = JsonSerializer.Serialize(Elementos);
            await JSRuntime.InvokeVoidAsync("ScriptMaxHeightExtraContainer", Contenido, Contenedor, elementosJson);
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('resize', function() {
                    ScriptMaxHeightExtraContainer('" + Contenido + "', '" + Contenedor + "', '" + elementosJson + @"');
                });
            ");


        }
    }




}
