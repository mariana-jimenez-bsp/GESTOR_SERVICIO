@inject ITiemposInterface TiemposService
<head>
    <link href="css/modalTiempos.css" rel="stylesheet" type="text/css" />
</head>
<div id="modal" class="modal" style='display: @(ActivarModal ? "block" : "none")'>
    <div class="modal-content">

        <div class="modal-header d-flex justify-content-center text-primary">
            <h2>Tiempos <i class="fa-solid fa-clock fa-xl"></i></h2>
        </div>
        <div class="max-height-time overflow-auto scrollbar-time">
            <div class="modal-body d-flex row g-2 text-center">
            @if (tiempos != null)
             {
            foreach(var tiempo in tiempos){
            
                <div class="d-flex justify-content-center">
                <label class="col-md-2 mt-3 text-primary me-2" for="tiempo-@tiempo.nombre_servicio">@tiempo.nombre_servicio:</label>
                <input value="@tiempo.horas" class="col-md-2 border border-success rounded-pill px-2 text-success" type="text" id="tiempo-@tiempo.nombre_servicio" @oninput="(e) => CambioTiempo(e, tiempo.Id)" />
            </div>
          
            }
            }
            </div>
        </div>
        <div class="modal-footer">
            <button @onclick="() => CloseModal()" class="rounded-pill border border-primary bg-primary text-light" id="descartar">Descartar cambios</button>
            <button @onclick="() => ActualizarListaTiempos()" class="rounded-pill border border-success bg-success text-light" id="guardar">Guardar cambios</button>
        </div>

    </div>
</div>

@code {

    [Parameter] public bool ActivarModal { get; set; } = false;
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    public List<mTiempos> tiempos = new List<mTiempos>();
    protected override async Task OnInitializedAsync()
    {
        await TiemposService.ObtenerListaTIempos();
        if (TiemposService.ObtenerListaTIempos() != null)
        {
            tiempos = TiemposService.ListaTiempos;
        }
    }
    private void CambioTiempo(ChangeEventArgs e, string id)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            foreach(var tiempo in tiempos)
            {
                if(tiempo.Id == id)
                {
                    tiempo.horas = e.Value.ToString();
                }
            }
        }
    }
    private void OpenModal()
    {
        ActivarModal = true;

    }
    private async Task ActualizarListaTiempos()
    {

        await TiemposService.ActualizarListaDeTiempo(tiempos);
        await TiemposService.ObtenerListaTIempos();
        if (TiemposService.ObtenerListaTIempos() != null)
        {
            tiempos = TiemposService.ListaTiempos;
        }
        await CloseModal();
    }
    private async Task CloseModal()
    {
        await TiemposService.ObtenerListaTIempos();
        tiempos = TiemposService.ListaTiempos;
        await OnClose.InvokeAsync(false);
       
    }
}
